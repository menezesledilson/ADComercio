/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fluxos;

import financeiro.conexao.Conexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ledilson
 */
public class FluxoPedidoBobina extends javax.swing.JInternalFrame {

    /**
     * Creates new form FluxoPedidoBobina
     */
    public FluxoPedidoBobina() {
        initComponents();
        carregaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFluxoPedidoBobina = new javax.swing.JTable();
        lblTotalValor = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbTotalBobina = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Fluxo Pedido Bobinas");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        tbFluxoPedidoBobina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Título 5", "Título 6", "Título 7", "Título 8"
            }
        ));
        jScrollPane1.setViewportView(tbFluxoPedidoBobina);

        lblTotalValor.setText("0.00");

        jLabel1.setText("TotalValor");

        lbTotalBobina.setText("0");

        jLabel2.setText(" TotalBobina");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTotalBobina)
                    .addComponent(lblTotalValor, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(152, 152, 152))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalValor)
                    .addComponent(jLabel1))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTotalBobina)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void carregaTabela() {

        DefaultTableModel modelo = (DefaultTableModel) tbFluxoPedidoBobina.getModel();

        //Defini o tamanho da tabela
        tbFluxoPedidoBobina.getColumnModel().getColumn(0).setPreferredWidth(130);
        tbFluxoPedidoBobina.getColumnModel().getColumn(1).setPreferredWidth(10);
        tbFluxoPedidoBobina.getColumnModel().getColumn(2).setPreferredWidth(5);
        tbFluxoPedidoBobina.getColumnModel().getColumn(3).setPreferredWidth(15);
        tbFluxoPedidoBobina.getColumnModel().getColumn(4).setPreferredWidth(15);
        tbFluxoPedidoBobina.getColumnModel().getColumn(5).setPreferredWidth(15);
        tbFluxoPedidoBobina.getColumnModel().getColumn(6).setPreferredWidth(10);
        tbFluxoPedidoBobina.getColumnModel().getColumn(7).setPreferredWidth(10);

        // Criar um renderizador centralizado
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Aplicar o renderizador às colunas de valorpedido (índice 1) e quantidadebobina (índice 2)
        tbFluxoPedidoBobina.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
        tbFluxoPedidoBobina.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);

        try {
            Connection con = Conexao.getConnection();
            PreparedStatement pstm;
            ResultSet rs;

            String sqlSomaTotalBobinas = "SELECT SUM(quantidadeBobina) AS totalBobinas FROM pedidobobina WHERE EXTRACT(MONTH FROM CAST(dataPedido AS DATE)) = ? AND EXTRACT(YEAR FROM CAST(dataPedido AS DATE)) = ?";

            // Obtém o mês e o ano atuais
            Calendar cal = Calendar.getInstance();
            int mesAtual = -1;
            int mesAtualNovo = cal.get(Calendar.MONTH) + 1; // Note que os meses em Java começam do zero
            int anoAtual = cal.get(Calendar.YEAR);

            //verificar se o mês atual
            if (mesAtual != mesAtualNovo) {
                lbTotalBobina.setText("0");
                lblTotalValor.setText("0");
                modelo.setNumRows(0);

                //atualiza o mês atual
                mesAtual = mesAtualNovo;

            }

            try (PreparedStatement statementBobinas = con.prepareStatement(sqlSomaTotalBobinas)) {
                statementBobinas.setInt(1, mesAtual);
                statementBobinas.setInt(2, anoAtual);

                try (ResultSet resultadoBobinas = statementBobinas.executeQuery()) {
                    if (resultadoBobinas.next()) {
                        int totalBobinas = resultadoBobinas.getInt("totalBobinas");
                        lbTotalBobina.setText(String.valueOf(totalBobinas));
                    } else {
                        // Se não houver resultados, define o total como zero
                        lbTotalBobina.setText("0");
                    }
                }
            } catch (SQLException e) {
                // Trate exceções SQL conforme necessário
                e.printStackTrace();
            }

            // Consulta para obter a soma total da coluna Valor Pedido para o mês atual
            String sqlSomaTotalReal = "SELECT SUM(valorpedido) AS totalValor FROM pedidobobina WHERE EXTRACT(MONTH FROM CAST(dataPedido AS DATE)) = ? AND EXTRACT(YEAR FROM CAST(dataPedido AS DATE)) = ?";

            try (PreparedStatement statementValor = con.prepareStatement(sqlSomaTotalReal)) {
                statementValor.setInt(1, mesAtual);
                statementValor.setInt(2, anoAtual);

                try (ResultSet resultadoValor = statementValor.executeQuery()) {
                    if (resultadoValor.next()) {
                        Double totalValor = resultadoValor.getDouble("totalValor");
                        lblTotalValor.setText(String.valueOf(totalValor));
                    } else {
                        // Se não houver resultados, define o total como zero
                        lblTotalValor.setText("0");
                    }
                }
            } catch (SQLException e) {
                // Trate exceções SQL conforme necessário
                e.printStackTrace();
            }

            // Limpa a tabela antes de preencher os novos dados
            modelo.setNumRows(0);

            pstm = con.prepareStatement("SELECT * FROM pedidobobina ORDER BY  datapedido ASC;");
            rs = pstm.executeQuery();
            //Formatar o valor no campo jtable
            NumberFormat currencyValor = NumberFormat.getCurrencyInstance();
            while (rs.next()) {

                modelo.addRow(new Object[]{
                    //rs.getString(1), id da tabela do banco de dados
                    rs.getString(2),
                    currencyValor.format(rs.getDouble("valorpedido")),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7),
                    rs.getString(8),
                    rs.getString(9)
                });
            }
            Conexao.closeConnection(con, pstm, rs);

        } catch (Exception ErroSql) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar a tabela de dados: " + ErroSql, "ERRO", JOptionPane.ERROR_MESSAGE);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTotalBobina;
    private javax.swing.JLabel lblTotalValor;
    private javax.swing.JTable tbFluxoPedidoBobina;
    // End of variables declaration//GEN-END:variables
}
